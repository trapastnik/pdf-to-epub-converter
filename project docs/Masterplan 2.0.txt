# Master Plan 2.0: PDF to EPUB Converter

**Project Goal:**

Develop a robust and user-friendly PDF to EPUB converter that accurately handles complex PDF documents, produces well-formatted EPUB files compatible with Apple Books and other e-readers, and prioritizes the accurate conversion of Russian-language text.

**Phase 3: Core Functionality Refinement and Structure Enhancement**

**Goals:**

*   Significantly improve the accuracy of structure recognition (chapters, headings).
*   Implement proper formatting, including paragraph breaks, indentation, and hyphenation.
*   Create a functional table of contents.
*   Handle images and cover pages correctly.
*   Ensure the output EPUB is well-formatted and readable in Apple Books and other e-readers.

**Tasks:**

1. **PDF Parsing and Text Extraction Improvement:**

    *   **(Choice):**
        *   **Option A: Enhance PyMuPDF/OCR:** Investigate advanced PyMuPDF text extraction capabilities. Combine it with a more robust OCR approach. Use language-specific dictionaries in Tesseract for better Russian OCR accuracy. Consider alternatives like `pdfminer.six` or commercial OCR solutions if needed.
        *   **Option B: Explore Other Libraries:** Research and experiment with libraries like `pdfminer.six`, `Grobid` (if dealing with academic papers), or other specialized PDF parsing tools that might offer better structure analysis features out-of-the-box. Consider cloud-based OCR services (e.g., Amazon Textract, Google Cloud Vision) for higher accuracy, but be mindful of cost and privacy implications.
        *   **Recommendation:** Start with enhancing PyMuPDF and Tesseract, as it's already in the project. If results are unsatisfactory, move to `pdfminer.six` or explore commercial/cloud options.
    *   **Refine Text Extraction:** Improve the `extract_text_from_pdf` function. Handle multi-column layouts, tables, and other complex elements more intelligently. Consider using PyMuPDF's text extraction features in conjunction with OCR for better results on mixed-content pages.
    *   **Image Extraction:** If a page is detected as image-only, extract the image instead of applying OCR. Store images in a temporary directory and reference them in the EPUB.

2. **Structure Analysis Overhaul:**

    *   **Simplify and Modularize:** The current `analyze_structure` function is quite complex. Break it down into smaller, more manageable functions with clear responsibilities.
    *   **Improve Heading Detection:**
        *   Refine `get_font_stats` and `identify_heading_fonts`. Explore more sophisticated methods for identifying heading fonts. Consider using clustering algorithms to group fonts with similar characteristics.
        *   Enhance `identify_chapters_and_headings_multipass`. Use a more robust algorithm for heading level detection, possibly incorporating information about font styles (bold, italic) and text alignment in addition to size.
        *   Consider using machine learning techniques (e.g., training a classifier on a dataset of PDFs with known headings) for more accurate heading detection if sufficient data is available.
    *   **Chapter Detection:** Improve chapter detection logic. Look for patterns like "Chapter X," "Part Y," or other common chapter title formats, but also be prepared to handle documents without explicit chapter markings.
    *   **Table of Contents Extraction:**  If a table of contents is present in the PDF, try to extract it using PyMuPDF's TOC features or by analyzing the structure. Map the extracted TOC to the identified chapters and headings in the EPUB.

3. **Content Formatting:**

    *   **Paragraph Handling:** Implement proper paragraph detection. Use a combination of factors like line spacing, indentation, and sentence structure to identify paragraph boundaries.
    *   **Hyphenation:** Integrate a proper Russian hyphenation library (e.g., `Pyphen` with a Russian dictionary). Apply hyphenation during EPUB generation.
    *   **Page Number Removal:** Make the `remove_page_numbers` function more robust. Handle variations in page number formats. Consider using the page's physical layout information (e.g., proximity to top/bottom margins) to identify page numbers with higher accuracy.
    *   **Misaligned Lines:** Improve the `merge_misaligned_lines` function. Consider using horizontal alignment information from PyMuPDF to determine if lines belong to the same paragraph.
    *   **Font Handling:**  If specific fonts are crucial for the document, investigate embedding them in the EPUB (check licensing first). Otherwise, ensure that the EPUB uses standard fonts that are widely available on e-readers.

4. **EPUB Generation Enhancement:**

    *   **Cover Page:** Add support for identifying and handling cover pages. If the first page is an image, mark it as the cover image in the EPUB.
    *   **Table of Contents (NCX/Nav):**  Generate a well-structured table of contents in the EPUB using `ebooklib`. Ensure the TOC reflects the identified chapter and heading hierarchy. Link TOC entries to the correct locations in the EPUB content.
    *   **CSS Styling:** Refine the CSS to improve readability in Apple Books and other e-readers. Consider using a CSS reset to ensure consistent rendering across devices. Pay attention to margins, line height, font sizes, and paragraph spacing. Use a dedicated class for the table of contents to style it appropriately.
    *   **Metadata:**  Ensure all relevant metadata (title, author, etc.) is correctly extracted and included in the EPUB.
    *   **Image Handling:**  Include extracted images in the EPUB. Use appropriate HTML tags (`<img>`) and attributes (`alt` for accessibility). Consider image optimization (resizing, compression) to reduce EPUB file size.

5. **Error Handling and User Feedback:**

    *   **Robust Error Handling:** Implement comprehensive error handling throughout the conversion process. Catch exceptions, log errors, and provide informative error messages to the user in the Gradio interface.
    *   **Progress Indicator:**  Enhance the progress indicator to provide more granular feedback during the conversion process. Break down the process into stages (e.g., parsing, structure analysis, EPUB generation) and update the progress bar accordingly.

6. **Testing:**

    *   **Unit Tests:** Write unit tests for individual functions in `pdf_parser.py`, `structure_analyzer.py`, and `epub_generator.py`.
    *   **Integration Tests:** Create integration tests that cover the entire conversion process for various types of PDF files (text-based, image-based, different layouts).
    *   **EPUB Validation:** Use an EPUB validator (e.g., the one provided by the IDPF) to check the generated EPUB files for conformance to the EPUB standard.
    *   **E-reader Testing:** Test the generated EPUB files on various e-readers (including Apple Books) to ensure they render correctly.

**Phase 4: Advanced Features and Optimization**

**Goals:**

*   Implement OCR for scanned PDFs.
*   Improve performance and scalability.
*   Consider optional user customization options.

**Tasks:**

1. **OCR Integration:**

    *   Fully integrate Tesseract OCR or a cloud-based OCR service.
    *   Provide an option in the UI to enable/disable OCR.
    *   Handle OCR results effectively, merging them with extracted text from PyMuPDF where appropriate.

2. **Performance and Scalability:**

    *   **Profiling:** Profile the code to identify performance bottlenecks.
    *   **Optimization:** Optimize critical sections of the code (e.g., structure analysis, EPUB generation). Consider using asynchronous tasks or multiprocessing to speed up the conversion process, especially for large files.
    *   **Caching:** Implement caching for frequently accessed data (e.g., font statistics) to reduce redundant computations.
    *   **Scalability:** If the application needs to handle a large number of concurrent users, consider using a message queue (e.g., Celery) to distribute the workload and a load balancer to manage multiple worker processes. Also, it can be a good time to switch from JSON to SQLite.

3. **User Customization (Optional):**

    *   **Font Selection:** Allow users to choose preferred fonts for the EPUB output.
    *   **Styling Options:** Provide options to customize CSS styles (e.g., margins, line spacing).
    *   **Output Settings:** Allow users to configure EPUB metadata (e.g., title, author) if it cannot be extracted automatically.

**Technology Stack Considerations:**

*   **Python:** Remains a good choice for the core language.
*   **Gradio:** Continue using Gradio for the UI.
*   **PyMuPDF:**  Continue using PyMuPDF, but enhance its usage and explore its advanced features.
*   **Ebooklib:** Continue using Ebooklib for EPUB generation.
*   **Tesseract OCR:**  For basic OCR or as a fallback.
*   **Cloud OCR Services (Optional):** Amazon Textract, Google Cloud Vision, or Azure Computer Vision for higher accuracy and scalability.
*   **Pyphen:** For Russian hyphenation.
*   **SQLite:** Might be a good time to switch to SQLite if we implement user data or extensive logs

**Development Process:**

*   **Agile:** Continue using an Agile approach with short sprints.
*   **Version Control:**  Use Git for version control.
*   **Code Reviews:** Conduct code reviews to ensure code quality and maintainability.
*   **Testing:**  Prioritize testing throughout the development process.