# Masterplan 2.0: PDF to EPUB Converter

## App Overview and Objectives

This document outlines the development plan for a user-friendly PDF to
EPUB converter application. The primary objective is to create a simple
yet effective tool that allows users to convert PDF documents,
especially large and complex ones, into well-structured EPUB files
suitable for reading on e-readers. The app will prioritize accurate
conversion, preserving the original document's structure (chapters, TOC,
subtitles) to the greatest extent possible. The focus is on individual
users seeking to improve their reading experience.

## Target Audience

The target audience for this application is everyday users who wish to
read PDF books on their e-readers. These users are not expected to have
technical expertise and are primarily looking for a straightforward and
intuitive solution for converting their files.

## Current Status and Issues

The project is up and running (see [GitHub
repository](https://github.com/trapastnik/pdf-to-epub-converter.git)),
but the initial implementation needs significant improvement in
structure recognition and formatting. The current EPUB output
demonstrates the following issues:

-   **Inconsistent Chapter/Heading Detection:** Chapters are not being
    correctly identified and separated. The table of contents is not
    functioning as intended.
-   **Incorrect Text Flow and Formatting:** Text lines are broken
    inappropriately. Text formatting (bold, italics, etc.) is
    inconsistent, sometimes applied to partial words.
-   **Image Handling:** Images are present but not optimally placed and
    scaled. They may also suffer from the same line-break issues as the
    text.
-   **Pagination:** The original PDF's pagination is being carried over
    to the EPUB in some places, which is undesirable for reflowable
    e-reader formats.

## Revised Iterative Plan

This plan outlines the iterations needed to address the identified
issues and build a robust, high-quality PDF to EPUB converter.

### Phase 1: Foundation - Robust PDF Parsing and Structure Extraction (Estimated Time: 2-4 Weeks)

-   **Goal:** Establish a reliable foundation for parsing PDF content
    and accurately extracting the document's structure.
-   **Tasks:**
    1.  **PDF Library Evaluation and Selection:**
        -   Evaluate `PyMuPDF` (current choice) and other potential
            libraries like `PDFQuery`, `Tika`, and `pdftotext` (with
            Poppler bindings).
        -   **Criteria:**
            -   Accuracy of text extraction.
            -   Structure detection capabilities (headings, paragraphs,
                tables, lists).
            -   Handling of complex layouts.
            -   Performance with large files.
            -   Font handling.
        -   **Deliverable:** A report comparing the libraries,
            justifying the final choice, and outlining a migration plan
            if necessary.
    2.  **Improved Text Extraction and Preprocessing:**
        -   Implement a more sophisticated text extraction process that
            handles:
            -   Hyphenation.
            -   Ligatures (e.g., "fi", "fl").
            -   Special Characters and Unicode.
        -   **Deliverable:** A refined text extraction module integrated
            into the core library.
    3.  **Enhanced Structure Analysis:**
        -   Develop algorithms to reliably detect:
            -   Chapters (using font size, style, position, keywords).
            -   Headings (H1-H6) (using font properties and hierarchical
                relationships).
            -   Paragraphs (considering line breaks, indentation, and
                spacing).
            -   Table of Contents (parse existing TOC to create a
                navigable EPUB TOC).
        -   **Deliverable:** A structure analysis module producing a
            hierarchical representation of the document.
    4.  **Refine Data Model:**
        -   Update the internal data model (currently JSON) to
            accurately reflect the extracted structure, including font
            information, heading levels, etc.
        -   **Deliverable:** A well-defined data model for storing and
            manipulating the parsed PDF structure.
    5.  **Unit and Integration Testing:**
        -   Write comprehensive unit tests for each component (text
            extraction, structure analysis).
        -   Develop integration tests to verify that components work
            together correctly.
        -   **Deliverable:** A robust test suite.

### Phase 2: Refinement - Formatting, Image Handling, and User Interaction (Estimated Time: 3-5 Weeks)

-   **Goal:** Improve EPUB formatting, handle images correctly, and
    refine the user interface for structure confirmation.
-   **Tasks:**
    1.  **Advanced Text Formatting:**
        -   Preserve original formatting (bold, italics, etc.) based on
            extracted font information.
        -   Implement intelligent line wrapping and paragraph formatting
            for e-readers.
        -   **Deliverable:** An EPUB generation module producing
            well-formatted text.
    2.  **Image Extraction and Optimization:**
        -   Extract images with the highest possible quality.
        -   Convert images to web-friendly formats (JPEG, PNG).
        -   Resize and optimize images for e-reader displays.
        -   Place images correctly within the text flow.
        -   **Deliverable:** An image processing module for extraction,
            conversion, optimization, and placement.
    3.  **User-Assisted Structure Validation:**
        -   Enhance the Gradio interface to display the detected
            structure.
        -   Allow users to:
            -   Confirm or reject identified chapters and headings.
            -   Adjust heading levels.
            -   Merge or split paragraphs.
            -   Correct errors in the detected structure.
        -   **Deliverable:** A user-friendly interface for structure
            validation and correction.
    4.  **EPUB Metadata Handling:**
        -   Extract metadata from the PDF and include it in the EPUB.
        -   Allow users to edit or add metadata.
        -   **Deliverable:** An EPUB generation module that correctly
            sets EPUB metadata.
    5.  **Navigation and TOC Generation:**
        -   Generate a navigable EPUB table of contents based on the
            confirmed structure.
        -   Ensure internal links within the EPUB function correctly.
        -   **Deliverable:** A well-formed EPUB with a functional table
            of contents.

### Phase 3: Production-Ready - Optimization, Testing, and Deployment (Estimated Time: 2-3 Weeks)

-   **Goal:** Optimize the application for performance, conduct thorough
    testing, and prepare for deployment.
-   **Tasks:**
    1.  **Performance Profiling and Optimization:**
        -   Profile the application to identify bottlenecks.
        -   Optimize code for speed and efficiency, especially for large
            files.
        -   Consider asynchronous processing or multiprocessing.
        -   **Deliverable:** An optimized application with improved
            performance.
    2.  **Comprehensive Testing:**
        -   Perform end-to-end testing with a wide range of PDFs
            (complex layouts, tables, images, different languages).
        -   Test generated EPUB files on various e-reader devices and
            software.
        -   **Deliverable:** A comprehensive test report demonstrating
            robustness and compatibility.
    3.  **Error Handling and Logging:**
        -   Implement robust error handling for unexpected situations
            (corrupted PDFs, invalid input).
        -   Add logging to track errors and facilitate debugging.
        -   **Deliverable:** A stable application with robust error
            handling and logging.
    4.  **Deployment:**
        -   Choose a suitable deployment environment (cloud-based server
            or local server).
        -   Deploy the application and configure it for production use.
        -   **Deliverable:** A deployed application accessible to users.

## Ongoing: Maintenance and Future Enhancements

-   **Monitoring:** Monitor application performance and address issues.
-   **User Feedback:** Collect user feedback to guide future
    development.
-   **Future Features:** Implement features from the original "Future
    Expansion Possibilities" section (OCR, batch conversion, user
    accounts, customization options) based on demand and resources.

## Technology Choices and Justification

-   **Python:** Remains the best choice for text processing, PDF
    manipulation, and web development.
-   **Gradio:** Suitable for the user interface, especially for rapid
    prototyping.
-   **PDF Parsing Library:** Choice between `PyMuPDF`, `PDFQuery`,
    `Tika`, and `pdftotext` will be made after evaluation in Phase 1.
-   **`ebooklib`:** A good option for EPUB generation, but alternatives
    may be considered.
-   **Data Storage:** File-based storage (JSON) is sufficient for
    initial phases. SQLite can be adopted later if needed.

## Core Features and Functionality ( পুনর্বিবেচনা)

-   **PDF Upload:** Users can upload PDF files for conversion.
-   **Structure Analysis:** The app will analyze the uploaded PDF to
    identify its structure, including:
    -   Existing metadata (if available).
    -   Internal structure based on content analysis (headings, text
        flow, etc.).
-   **User-Assisted Structure Definition:**
    -   The app will present the detected structure to the user for
        confirmation.
    -   Users can manually mark up the document (e.g., define chapters,
        headings) if the automatic analysis is insufficient.
-   **Conversion to EPUB:** The app will convert the PDF to EPUB format,
    preserving the defined structure.
-   **Progress Display:** Users will see a clear indication of the
    conversion progress.
-   **EPUB Download:** Users can download the converted EPUB file.
-   **Post-Conversion Cleanup:** Temporary files generated during the
    process will be automatically deleted after the conversion is
    complete.

## High-Level Technical Stack Recommendations ( পুনর্বিবেচনা)

-   **Programming Language:** Python (for its simplicity, extensive
    libraries, and suitability for text processing).
-   **User Interface Framework:** Gradio (for rapid development of
    user-friendly web interfaces).
-   **PDF Parsing Library:** Further research needed. Potential options
    include PyPDF2, PyMuPDF, PDFQuery, or Tika. The choice will depend
    on accuracy in structure detection, handling of complex PDFs, and
    performance.
-   **EPUB Generation Library:** `ebooklib` or similar libraries for
    creating well-formed EPUB files.
-   **Data Storage (Current):** File-based storage (JSON or YAML) for
    storing intermediate data during the conversion process (e.g.,
    parsed structure, user input).
-   **Data Storage (Future):** SQLite database (if needed for
    scalability or more complex data relationships).
-   **OCR (Future):** Consider integrating OCR capabilities (e.g.,
    Tesseract or cloud-based APIs) for handling scanned PDFs.

## Conceptual Data Model ( পুনর্বিবেচনা)

The application will primarily deal with the following data:

-   **Uploaded PDF:** The raw PDF file uploaded by the user.
-   **Parsed Structure:** A hierarchical representation of the
    document's structure, including:
    -   Chapters
    -   Headings (with levels)
    -   Paragraphs
    -   Page numbers
    -   Images
    -   Table of Contents (if present)
    -   Metadata (title, author, etc.)
-   **User Input:** Any modifications or confirmations provided by the
    user regarding the document structure.
-   **Output EPUB:** The generated EPUB file.

## Security Considerations ( পুনর্বিবেচনা)

-   **No User Authentication (Current):** The initial version will not
    require user accounts.
-   **Data Privacy:** User-uploaded files will not be stored
    permanently.
-   **Temporary File Cleanup:** Implement a mechanism to automatically
    delete all temporary files after the conversion process is complete.

## Potential Challenges and Solutions ( পুনর্বিবেচনা)

-   **Challenge:** Accurately parsing the structure of complex or poorly
    formatted PDFs.
    -   **Solution:** Invest significant effort in researching and
        testing different PDF parsing libraries. Implement robust error
        handling and fallback mechanisms. Allow for user intervention to
        correct parsing errors.
-   **Challenge:** Handling a wide variety of character encodings and
    embedded fonts.
    -   **Solution:** Use libraries that can properly detect and handle
        different encodings. Provide options for font embedding or
        substitution in the EPUB output.
-   **Challenge:** Ensuring consistent EPUB output across different
    e-readers.
    -   **Solution:** Adhere strictly to the EPUB standard. Test the
        generated EPUB files on a variety of e-reader devices and
        software.
-   **Challenge:** Scalability for a large number of concurrent users
    (Future).
    -   **Solution:** Design the core library with scalability in mind.
        Consider using a task queue system (e.g., Celery) and a load
        balancer for distributing the workload. Transition to SQLite or
        a cloud-based database if necessary.

## Future Expansion Possibilities ( পুনর্বিবেচনা)

-   **Batch Conversion:** Allow users to convert multiple PDFs at once.
-   **User Accounts:** Implement user accounts to allow users to save
    their conversion history or preferences.
-   **Customization Options:** Provide more control over the output
    EPUB, such as font choices, styling, and image handling.
-   **API Integration:** Develop an API to allow other applications to
    integrate with the conversion service.
-   **Support for other document formats:** Consider adding support for
    converting other document formats (e.g., DOCX, HTML) to EPUB.
